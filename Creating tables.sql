USE [JIRA];

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'USER_MEMBERS'))
BEGIN
	DROP TABLE USER_MEMBERS
END

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'USER_PROJECT_ROLE'))
BEGIN
	DROP TABLE USER_PROJECT_ROLE
END

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'PROJECT_SECURITY_GROUP'))
BEGIN
	DROP TABLE PROJECT_SECURITY_GROUP
END


IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'PROJECT_ROLE'))
BEGIN
	DROP TABLE PROJECT_ROLE
END

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'GROUP'))
BEGIN
	DROP TABLE [GROUP]
END
IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'SPRINT_ISSUES'))
BEGIN
	DROP TABLE [SPRINT_ISSUES]
END
IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'STORY'))
BEGIN
	DROP TABLE [STORY]
END

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'ISSUE_CHANGELOG'))
BEGIN
	DROP TABLE [ISSUE_CHANGELOG]
END

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'ISSUES'))
BEGIN
	DROP TABLE [ISSUES]
END

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'STATUS'))
BEGIN
	DROP TABLE [STATUS]
END
IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'ISSUE_TYPE'))
BEGIN
	DROP TABLE [ISSUE_TYPE]
END

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'USERS'))
BEGIN
	DROP TABLE [USERS]
END

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'SPRINT_METRICS'))
BEGIN
	DROP TABLE [SPRINT_METRICS]
END

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'SPRINT'))
BEGIN
	DROP TABLE [SPRINT]
END

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'BOARD'))
BEGIN
	DROP TABLE [BOARD]
END

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'PROJECT'))
BEGIN
	DROP TABLE PROJECT
END

IF (EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'CATEGORY'))
BEGIN
	DROP TABLE CATEGORY
END


CREATE TABLE [USERS](
	accountId VARCHAR(128),
	displayName VARCHAR(255),
	emailAddress VARCHAR(255),
	active VARCHAR(25),
	lastSeen DATETIME,
	addedToOrg DATETIME,
	PRIMARY KEY(ACCOUNTID)
);

CREATE TABLE CATEGORY(
	[ID] INTEGER,
	[NAME] VARCHAR(255),
	PRIMARY KEY([ID])
);

CREATE TABLE [PROJECT](
	[ID] INTEGER,
	[CATEGORY] INTEGER FOREIGN KEY REFERENCES CATEGORY(ID),
	[NAME] VARCHAR(128),
	[KEY] VARCHAR(50),
	[ARCHIVED] BIT,
    [TYPE] VARCHAR(50),
    [ISPRIVATE] BIT,
	PRIMARY KEY([ID])
)

CREATE TABLE [PROJECT_ROLE](
	[ID] INTEGER,
	[NAME] VARCHAR(128),
	PRIMARY KEY(ID)
);

CREATE TABLE [GROUP] (
	[GROUPID] VARCHAR(128),
	[NAME] VARCHAR(128),
	PRIMARY KEY([GROUPID])
);

CREATE TABLE [USER_MEMBERS](
	[ACCOUNTID] VARCHAR(128),
	[GROUPID] VARCHAR(128),
	PRIMARY KEY([ACCOUNTID], [GROUPID]),
	FOREIGN KEY([ACCOUNTID]) REFERENCES USERS([ACCOUNTID]),
	FOREIGN KEY([GROUPID]) REFERENCES [GROUP]([GROUPID])
);


CREATE TABLE [USER_PROJECT_ROLE](
	[USERID] VARCHAR(128),
	[ROLEID] INTEGER,
	[PROJECTID] INTEGER,
	PRIMARY KEY([USERID], [ROLEID], [PROJECTID]),
	FOREIGN KEY([USERID]) REFERENCES [USERS]([ACCOUNTID]),
	FOREIGN KEY([ROLEID]) REFERENCES [PROJECT_ROLE]([ID]),
	FOREIGN KEY([PROJECTID]) REFERENCES [PROJECT]([ID])
);


CREATE TABLE PROJECT_SECURITY_GROUP(
	PROJECTID INTEGER,
	GROUPID VARCHAR(128),
	ROLEID INTEGER,
	FOREIGN KEY (PROJECTID) REFERENCES PROJECT(ID),
	FOREIGN KEY (GROUPID) REFERENCES [GROUP](GROUPID),
	FOREIGN KEY (ROLEID) REFERENCES [PROJECT_ROLE](ID),
	PRIMARY KEY (PROJECTID, GROUPID, ROLEID)
);

CREATE TABLE [BOARD](
	ID INTEGER PRIMARY KEY,
	PROJECTID INTEGER,
	[NAME] VARCHAR(128),
	[TYPE] VARCHAR(50),
	FOREIGN KEY (PROJECTID) REFERENCES PROJECT(ID)
)

CREATE TABLE [SPRINT](
	ID INTEGER PRIMARY KEY,
	BOARDID INTEGER FOREIGN KEY REFERENCES BOARD(ID),
	[STATUS] VARCHAR(128),
	STARTDATE DATETIME,
	ENDDATE DATETIME,
	COMPLETEDDATE DATETIME
)

CREATE TABLE [SPRINT_METRICS](
	ID INTEGER PRIMARY KEY,
	SP_COMMITTED INTEGER DEFAULT 0,
	SP_ADDED INTEGER DEFAULT 0,
	SP_CHANGED INTEGER DEFAULT 0,
	SP_COMPLETED INTEGER DEFAULT 0,
	SP_COMPLETED_OF_COMMITTED INTEGER DEFAULT 0,
	N_ISSUES_COMMITTED INTEGER DEFAULT 0,
	N_ISSUES_REMOVED INTEGER DEFAULT 0,
	N_ISSUES_COMPLETED INTEGER DEFAULT 0,
	N_ISSUES_COMPLETED_COMMITTED INTEGER DEFAULT 0,
	N_ISSUES_NOT_COMPLETED INTEGER DEFAULT 0,
	FOREIGN KEY (ID) REFERENCES SPRINT(ID)
);
CREATE TABLE ISSUE_TYPE(
	ID INTEGER PRIMARY KEY,
	[NAME] VARCHAR(128)
);
CREATE TABLE [STATUS](
	[ID] INTEGER PRIMARY KEY,
	[STATUS] VARCHAR(50)
);

CREATE TABLE [ISSUES](
	ID INTEGER PRIMARY KEY,
	[KEY] VARCHAR(50),
	PROJECT INTEGER FOREIGN KEY REFERENCES PROJECT(ID),
	[TYPE] INTEGER,
	[STATUS] INTEGER FOREIGN KEY REFERENCES [STATUS](ID),
	[CREATED] DATETIME,
	[UPDATED] DATETIME,
	[ASIGNEE] VARCHAR(128) FOREIGN KEY REFERENCES USERS(ACCOUNTID),
	[REPORTER] VARCHAR(128) FOREIGN KEY REFERENCES USERS(ACCOUNTID),
	[PARENT] INTEGER FOREIGN KEY REFERENCES ISSUES(ID)
)

CREATE TABLE [ISSUE_CHANGELOG](
	ID INT PRIMARY KEY,
	ISSUEID INTEGER FOREIGN KEY REFERENCES [ISSUES](ID),
	CREATED DATETIME,
	FIELDNAME VARCHAR(128),
	FIELDID INTEGER,
	[FROM] INT,
	[FROMSTRING] VARCHAR(255),
	[TO] INT,
	[TOSTRING] VARCHAR(255),
	AUTHOR VARCHAR(128) FOREIGN KEY REFERENCES USERS(ACCOUNTID)
)
CREATE TABLE [STORY](
	ID INTEGER PRIMARY KEY FOREIGN KEY REFERENCES [ISSUES](ID),
	STORY_POINTS INT DEFAULT 0
)
CREATE TABLE [SPRINT_ISSUES](
	STORY INTEGER FOREIGN KEY REFERENCES [STORY](ID),
	SPRINT INTEGER FOREIGN KEY REFERENCES [SPRINT](ID),
	PRIMARY KEY(STORY, SPRINT)
)

ALTER TABLE ISSUES ADD CONSTRAINT FK_ISSUE_TYPE FOREIGN KEY ([TYPE]) REFERENCES [ISSUE_TYPE](ID);
ALTER TABLE ISSUES ADD CONSTRAINT FK_ISSUE_STATUS FOREIGN KEY ([STATUS]) REFERENCES [STATUS](ID);
ALTER TABLE PROJECT ADD CONSTRAINT FK_PROJECT_CATEGORY FOREIGN KEY ([CATEGORY]) REFERENCES [CATEGORY](ID);